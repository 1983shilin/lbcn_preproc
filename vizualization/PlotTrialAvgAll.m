function PlotTrialAvgAll(sbj_name,project_name,block_names,dirs,elecs,datatype,locktype,column,conds,noise_method,plot_params)

%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs: can select subset of electrodes to epoch (default: all)
%              (if specifying elecs, can either be vectors of elec #s or cells of elec names)
%       datatype: 'CAR','HFB',or 'Spec'
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)
%               can group multiple conds together by having a cell of cells
%               (e.g. conds = {{'math'},{'autobio','self-internal'}})            
%       col:    colors to use for plotting each condition (otherwise will
%               generate randomly)
%       noise_method:   how to exclude data (default: 'trial'):
%                       'none':     no epoch rejection
%                       'trial':    exclude noisy trials (set to NaN)
%                       'timepts':  set noisy timepoints to NaN but don't exclude entire trials
%       plot_params:    controls plot features (see genPlotParams.m script)


load('cdcol.mat')

if isempty(plot_params)
    plot_params = genPlotParams(project_name,'timecourse');
end

if isempty(noise_method)
    noise_method = 'trial';
end

load([dirs.data_root,'/OriginalData/',sbj_name,'/global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if iscell(elecs)
    elecs = ChanNamesToNums(globalVar,elecs);
end

if isempty(elecs)
    % load globalVar (just to get ref electrode, # electrodes)
    
    elecs = setdiff(1:globalVar.nchan,globalVar.refChan);
end

if plot_params.multielec
    dir_out = [dirs.result_root,'/',project_name,'/',sbj_name,'/Figures/',datatype,'Data/',locktype,'lock/multielec']; 
else
    dir_out = [dirs.result_root,'/',project_name,'/',sbj_name,'/Figures/',datatype,'Data/',locktype,'lock'];
end
if ~exist(dir_out)
    mkdir(dir_out)
end

%% loop through electrodes and plot

if plot_params.multielec  % if plotting multiple elecs on same fig
    elec_names = cell(1,length(elecs));
    elec_names_all = [];
end

tag = [locktype,'lock'];
if plot_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'wave'}; % concatenate amplitude across blocks
% concatParams.run_blc = true;
% concatParams.bl_win = [-0.5 0];
% concatParams.power = true;

col_tmp = plot_params.col;
if (plot_params.multielec)
    ymin = 0;
    ymax = 0;
end
for ei = 1:length(elecs)
    el = elecs(ei);
    
    data_all = concatBlocks(sbj_name,block_names,dirs,el,datatype,concatfield,tag);
    if strcmp(noise_method,'timepts')
        data_all = removeBadTimepts(data_all);
    end
    
    if isempty(conds)
        tmp = find(~cellfun(@isempty,(data_all.trialinfo.(column))));
        conds = unique(data_all.trialinfo.(column)(tmp));
    end
    
    if (plot_params.multielec) % if plotting multiple elecs in same figure (will group all conditions together)
        plot_params.col = col_tmp(ei,:); % plot each elec in diff color
        h(ei) = PlotTrialAvg(data_all,column,conds,plot_params,noise_method);
        ymin = min(ymin,min(h(ei).YData));
        ymax = max(ymax,max(h(ei).YData));
        elec_names{ei} = data_all.label;
        elec_names_all = [elec_names_all,'_',data_all.label];
    else
        PlotTrialAvg(data_all,column,conds,plot_params,noise_method);
        if strcmp(plot_params.label,'name')
            title(data_all.label)
        elseif strcmp(plot_params.label,'number')
            title('Elec ',num2str(el))
        end
        fn_out = sprintf('%s/%s_%s_%s_%s_%slock.png',dir_out,sbj_name,data_all.label,project_name,datatype,locktype);
        saveas(gcf,fn_out)
        close
    end

end

if plot_params.multielec  % if plotting multiple elecs, create legend based on elec #
    ylim([ymin ymax])
    plot([0 0],ylim,'Color', [0 0 0], 'LineWidth',2)
    leg = legend(h,elec_names);
    legend boxoff
    set(leg,'fontsize',14);
    title_conds = conds{1};
    for ci = 2:length(conds)
        title_conds = [title_conds,'+',conds{ci}];
    end
    title(title_conds)
    fn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock.png',dir_out,sbj_name,elec_names_all,title_conds,project_name,datatype,locktype);
    saveas(gcf,fn_out)
    close
end
